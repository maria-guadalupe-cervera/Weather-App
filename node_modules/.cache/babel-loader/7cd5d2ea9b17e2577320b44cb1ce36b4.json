{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guada\\\\OneDrive\\\\Escritorio\\\\Extras\\\\weather-app-responsive\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Nav from \"../components/Nav.jsx\";\nimport Cards from \"../components/Cards.jsx\"; // importo los componentes About y City\n\nimport About from \"../components/About\";\nimport City from \"../components/City\"; // importo Route:\n\nimport { Route } from \"react-router-dom\";\nimport video from \"../img/video.mp4\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const apiKey = \"4ae2636d8dfbdc3044bede63951a019b\";\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      autoPlay: true,\n      loop: true,\n      muted: true,\n      style: {\n        position: \"absolute\",\n        width: \"100%\",\n        left: \"50%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        transform: \"translate(-50%,-50%)\",\n        zIndex: \"-1\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: video,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/ciudad/:ciudadId\",\n      render: ({\n        match\n      }) => /*#__PURE__*/_jsxDEV(City, {\n        city: onFilter(match.params.ciudadId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/guada/OneDrive/Escritorio/Extras/weather-app-responsive/src/containers/App.js"],"names":["React","useState","Nav","Cards","About","City","Route","video","App","apiKey","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","onFilter","ciudadId","parseInt","length","position","width","left","height","objectFit","transform","zIndex","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Nav from \"../components/Nav.jsx\";\r\nimport Cards from \"../components/Cards.jsx\";\r\n// importo los componentes About y City\r\nimport About from \"../components/About\";\r\nimport City from \"../components/City\";\r\n// importo Route:\r\nimport { Route } from \"react-router-dom\";\r\nimport video from \"../img/video.mp4\";\r\n\r\nfunction App() {\r\n  const apiKey = \"4ae2636d8dfbdc3044bede63951a019b\";\r\n  const [cities, setCities] = useState([]);\r\n  function onClose(id) {\r\n    setCities((oldCities) => oldCities.filter((c) => c.id !== id));\r\n  }\r\n  function onSearch(ciudad) {\r\n    //Llamado a la API del clima\r\n    fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`\r\n    )\r\n      .then((r) => r.json())\r\n      .then((recurso) => {\r\n        if (recurso.main !== undefined) {\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon,\r\n          };\r\n          setCities((oldCities) => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n  }\r\n  function onFilter(ciudadId) {\r\n    let ciudad = cities.filter((c) => c.id === parseInt(ciudadId));\r\n    if (ciudad.length > 0) {\r\n      return ciudad[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <video\r\n        autoPlay\r\n        loop\r\n        muted\r\n        style={{\r\n          position: \"absolute\",\r\n          width: \"100%\",\r\n          left: \"50%\",\r\n          height: \"100%\",\r\n          objectFit: \"cover\",\r\n          transform: \"translate(-50%,-50%)\",\r\n          zIndex: \"-1\",\r\n        }}\r\n      >\r\n        <source src={video} type=\"video/mp4\" />\r\n      </video>\r\n      <Route path=\"/\" render={() => <Nav onSearch={onSearch} />} />\r\n      <Route path=\"/about\" component={About} />\r\n      <Route\r\n        exact\r\n        path=\"/\"\r\n        render={() => <Cards cities={cities} onClose={onClose} />}\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/ciudad/:ciudadId\"\r\n        render={({ match }) => <City city={onFilter(match.params.ciudadId)} />}\r\n      />\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}