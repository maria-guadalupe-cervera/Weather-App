{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guada\\\\OneDrive\\\\Escritorio\\\\Extras\\\\weather-app-responsive\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //import los estados de react\n\nimport './App.css'; //importo el css\n\nimport Nav from '../components/Nav.jsx'; //import el nav\n\nimport Cards from '../components/Cards.jsx'; //importo cards\n\nimport About from '../components/About'; //importo la pag about\n\nimport City from '../components/City'; //importo city\n\nimport { Route } from 'react-router-dom'; //importo route\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b'; //doy api key\n\nfunction App() {\n  _s();\n\n  //la funcion app\n  const [cities, setCities] = useState([]); //empiezo el state sin nada, despés le pusheare\n\n  function onClose(id) {\n    //la funcion cerrar, recibe una id para cerrar\n    setCities(oldCities => oldCities.filter(c => c.id !== id)); //set cities, es una funcion que recibe las old cities y la filtra, sacando la que tenga el id igual al pasado por parametro\n  }\n\n  function onSearch(ciudad) {\n    //funcion buscar la ciudad recibida por parametro\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`) //en la api busco esa ciudad, con el apiKey\n    .then(r => r.json()) //la vuelvo json\n    .then(resource => {\n      //recibo la respuesta\n      if (resource.main !== undefined) {\n        //y si existe\n        const ciudad = {\n          //la ciudad va a tener, los siguentes parametros\n          min: Math.round(resource.main.temp_min),\n          max: Math.round(resource.main.temp_max),\n          img: resource.weather[0].icon,\n          id: resource.id,\n          wind: resource.wind.speed,\n          temp: resource.main.temp,\n          name: resource.name,\n          weather: resource.weather[0].main,\n          clouds: resource.clouds.all,\n          latitud: resource.coord.lat,\n          longitud: resource.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]); // vuelvo la set cities con el valor del oldcities concatenados con la ciudad buscada\n      } else {\n        alert(\"Ciudad no encontrada\"); //si no esta devolver...\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    //la funcion filtrar, recibe el id de la ciudad\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId)); //la ciudad va a valer, las cities filtradas \n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        on: true,\n        Search: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/ciudad/:ciudadId\",\n      render: ({\n        match\n      }) => /*#__PURE__*/_jsxDEV(City, {\n        city: onFilter(match.params.ciudadId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/guada/OneDrive/Escritorio/Extras/weather-app-responsive/src/containers/App.js"],"names":["React","useState","Nav","Cards","About","City","Route","apiKey","App","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","resource","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","onFilter","ciudadId","parseInt","length","match","params"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAA4C;;AAC5C,OAAO,WAAP,C,CAAoB;;AACpB,OAAOC,GAAP,MAAgB,uBAAhB,C,CAA0C;;AAC1C,OAAOC,KAAP,MAAkB,yBAAlB,C,CAA8C;;AAC9C,OAAOC,KAAP,MAAkB,qBAAlB,C,CAA0C;;AAC1C,OAAOC,IAAP,MAAiB,oBAAjB,C,CAA0C;;AAC1C,SAASC,KAAT,QAAsB,kBAAtB,C,CAA0C;;;AAE1C,MAAMC,MAAM,GAAG,kCAAf,C,CAAoD;;AAEpD,SAASC,GAAT,GAAe;AAAA;;AAA+B;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC,CADa,CAC+B;;AAC5C,WAASU,OAAT,CAAiBC,EAAjB,EAAqB;AAAuB;AAC1CF,IAAAA,SAAS,CAACG,SAAS,IAAIA,SAAS,CAACC,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA/B,CAAd,CAAT,CADmB,CAC2C;AAC/D;;AACD,WAASI,QAAT,CAAkBC,MAAlB,EAA0B;AAAkB;AAC1CC,IAAAA,KAAK,CAAE,oDAAmDD,MAAO,UAASV,MAAO,EAA5E,CAAL,CAAoF;AAApF,KACGY,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EACwB;AADxB,KAEGF,IAFH,CAESG,QAAD,IAAc;AAAE;AACpB,UAAGA,QAAQ,CAACC,IAAT,KAAkBC,SAArB,EAA+B;AAAK;AAClC,cAAMP,MAAM,GAAG;AAAmB;AAChCQ,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcK,QAAzB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACC,IAAT,CAAcO,QAAzB,CAFQ;AAGbC,UAAAA,GAAG,EAAET,QAAQ,CAACU,OAAT,CAAiB,CAAjB,EAAoBC,IAHZ;AAIbrB,UAAAA,EAAE,EAAEU,QAAQ,CAACV,EAJA;AAKbsB,UAAAA,IAAI,EAAEZ,QAAQ,CAACY,IAAT,CAAcC,KALP;AAMbC,UAAAA,IAAI,EAAEd,QAAQ,CAACC,IAAT,CAAca,IANP;AAObC,UAAAA,IAAI,EAAEf,QAAQ,CAACe,IAPF;AAQbL,UAAAA,OAAO,EAAEV,QAAQ,CAACU,OAAT,CAAiB,CAAjB,EAAoBT,IARhB;AASbe,UAAAA,MAAM,EAAEhB,QAAQ,CAACgB,MAAT,CAAgBC,GATX;AAUbC,UAAAA,OAAO,EAAElB,QAAQ,CAACmB,KAAT,CAAeC,GAVX;AAWbC,UAAAA,QAAQ,EAAErB,QAAQ,CAACmB,KAAT,CAAeG;AAXZ,SAAf;AAaAlC,QAAAA,SAAS,CAACG,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAeI,MAAf,CAAd,CAAT,CAd6B,CAckB;AAChD,OAfD,MAeO;AACL4B,QAAAA,KAAK,CAAC,sBAAD,CAAL,CADK,CAC0B;AAChC;AACF,KArBH;AAsBD;;AACD,WAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAAI;AAC9B,QAAI9B,MAAM,GAAGR,MAAM,CAACK,MAAP,CAAcC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASoC,QAAQ,CAACD,QAAD,CAApC,CAAb,CAD0B,CACoC;;AAC9D,QAAG9B,MAAM,CAACgC,MAAP,GAAgB,CAAnB,EAAsB;AAClB,aAAOhC,MAAM,CAAC,CAAD,CAAb;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AACF;;AACD,sBAEE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAOK,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,MAAM,EAAE,mBAAM,QAAC,GAAD;AAAK,QAAA,EAAE,MAAP;AAAQ,QAAA,MAAM,EAAED;AAAhB;AAAA;AAAA;AAAA;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA,YAPL,eAQE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAEZ;AAAhC;AAAA;AAAA;AAAA;AAAA,YARF,eASE,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,MAAM,EAAE,mBAAO,QAAC,KAAD;AAAO,QAAA,MAAM,EAAEK,MAAf;AAAuB,QAAA,OAAO,EAAEE;AAAhC;AAAA;AAAA;AAAA;AAAA;AAArC;AAAA;AAAA;AAAA;AAAA,YATF,eAUE,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,mBAAlB;AACO,MAAA,MAAM,EAAE,CAAC;AAACuC,QAAAA;AAAD,OAAD,kBAAc,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEJ,QAAQ,CAACI,KAAK,CAACC,MAAN,CAAaJ,QAAd;AAApB;AAAA;AAAA;AAAA;AAAA;AAD7B;AAAA;AAAA;AAAA;AAAA,YAVF,eAaE;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAmBD;;GAxDQvC,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';    //import los estados de react\r\nimport './App.css'; //importo el css\r\nimport Nav from '../components/Nav.jsx';  //import el nav\r\nimport Cards from '../components/Cards.jsx';  //importo cards\r\nimport About from '../components/About';  //importo la pag about\r\nimport City from '../components/City';    //importo city\r\nimport { Route } from 'react-router-dom'; //importo route\r\n\r\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';  //doy api key\r\n\r\nfunction App() {                              //la funcion app\r\n  const [cities, setCities] = useState([]);   //empiezo el state sin nada, despés le pusheare\r\n  function onClose(id) {                      //la funcion cerrar, recibe una id para cerrar\r\n    setCities(oldCities => oldCities.filter(c => c.id !== id));   //set cities, es una funcion que recibe las old cities y la filtra, sacando la que tenga el id igual al pasado por parametro\r\n  }\r\n  function onSearch(ciudad) {                 //funcion buscar la ciudad recibida por parametro\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`) //en la api busco esa ciudad, con el apiKey\r\n      .then(r => r.json())  //la vuelvo json\r\n      .then((resource) => { //recibo la respuesta\r\n        if(resource.main !== undefined){    //y si existe\r\n          const ciudad = {                  //la ciudad va a tener, los siguentes parametros\r\n            min: Math.round(resource.main.temp_min),\r\n            max: Math.round(resource.main.temp_max),\r\n            img: resource.weather[0].icon,\r\n            id: resource.id,\r\n            wind: resource.wind.speed,\r\n            temp: resource.main.temp,\r\n            name: resource.name,\r\n            weather: resource.weather[0].main,\r\n            clouds: resource.clouds.all,\r\n            latitud: resource.coord.lat,\r\n            longitud: resource.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);// vuelvo la set cities con el valor del oldcities concatenados con la ciudad buscada\r\n        } else {\r\n          alert(\"Ciudad no encontrada\"); //si no esta devolver...\r\n        }\r\n      });\r\n  }\r\n  function onFilter(ciudadId) {   //la funcion filtrar, recibe el id de la ciudad\r\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId)); //la ciudad va a valer, las cities filtradas \r\n    if(ciudad.length > 0) {\r\n        return ciudad[0];\r\n    } else {\r\n        return null;\r\n    }\r\n  }\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      {/* <Nav onSearch={onSearch}/> */}\r\n      {/* <div> */}\r\n        {/* <Cards\r\n          cities={cities}\r\n          onClose={onClose}\r\n        /> */}\r\n         <Route path='/' render={() => <Nav on Search={onSearch} />}/>\r\n      <Route path='/about' component={About}/>\r\n      <Route exact path='/' render={() =>  <Cards cities={cities} onClose={onClose} />}/>\r\n      <Route exact path='/ciudad/:ciudadId' \r\n             render={({match}) => (<City city={onFilter(match.params.ciudadId)}/>)}/>\r\n     {/*  </div> */}\r\n      <hr />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}