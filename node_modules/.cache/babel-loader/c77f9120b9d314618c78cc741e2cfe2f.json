{"ast":null,"code":"// import React, { useState } from 'react';    //import los estados de react\n// import './App.css'; //importo el css\n// import Nav from '../components/Nav.jsx';  //import el nav\n// import Cards from '../components/Cards.jsx';  //importo cards\n// import About from '../components/About';  //importo la pag about\n// import City from '../components/City';    //importo city\n// import { Route } from 'react-router-dom'; //importo route\n// const apiKey = '4ae2636d8dfbdc3044bede63951a019b';  //doy api key\n// function App() {                              //la funcion app\n//   const [cities, setCities] = useState([]);   //empiezo el state sin nada, despÃ©s le pusheare\n//   function onClose(id) {                      //la funcion cerrar, recibe una id para cerrar\n//     setCities(oldCities => oldCities.filter(c => c.id !== id));   //set cities, es una funcion que recibe las old cities y la filtra, sacando la que tenga el id igual al pasado por parametro\n//   }\n//   function onSearch(ciudad) {                 //funcion buscar la ciudad recibida por parametro\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`) //en la api busco esa ciudad, con el apiKey\n//       .then(r => r.json())  //la vuelvo json\n//       .then((resource) => { //recibo la respuesta\n//         if(resource.main !== undefined){    //y si existe\n//           const ciudad = {                  //la ciudad va a tener, los siguentes parametros\n//             min: Math.round(resource.main.temp_min),\n//             max: Math.round(resource.main.temp_max),\n//             img: resource.weather[0].icon,\n//             id: resource.id,\n//             wind: resource.wind.speed,\n//             temp: resource.main.temp,\n//             name: resource.name,\n//             weather: resource.weather[0].main,\n//             clouds: resource.clouds.all,\n//             latitud: resource.coord.lat,\n//             longitud: resource.coord.lon\n//           };\n//           setCities(oldCities => [...oldCities, ciudad]);// vuelvo la set cities con el valor del oldcities concatenados con la ciudad buscada\n//         } else {\n//           alert(\"Ciudad no encontrada\"); //si no esta devolver...\n//         }\n//       });\n//   }\n//   function onFilter(ciudadId) {   //la funcion filtrar, recibe el id de la ciudad\n//     let ciudad = cities.filter(c => c.id === parseInt(ciudadId)); //la ciudad va a valer, las cities filtradas \n//     if(ciudad.length > 0) {\n//         return ciudad[0];\n//     } else {\n//         return null;\n//     }\n//   }\n//   return (\n//     <div className=\"App\">\n//       {/* <Nav onSearch={onSearch}/> */}\n//       {/* <div> */}\n//         {/* <Cards\n//           cities={cities}\n//           onClose={onClose}\n//         /> */}\n//          <Route path='/' render={() => <Nav on Search={onSearch} />}/>\n//       <Route path='/about' component={About}/>\n//       <Route exact path='/' render={() =>  <Cards cities={cities} onClose={onClose} />}/>\n//       <Route exact path='/ciudad/:ciudadId' \n//              render={({match}) => (<City city={onFilter(match.params.ciudadId)}/>)}/>\n//      {/*  </div> */}\n//       <hr />\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"sources":["C:/Users/guada/OneDrive/Escritorio/Extras/weather-app-responsive/src/containers/App.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import React, { useState } from 'react';    //import los estados de react\r\n// import './App.css'; //importo el css\r\n// import Nav from '../components/Nav.jsx';  //import el nav\r\n// import Cards from '../components/Cards.jsx';  //importo cards\r\n// import About from '../components/About';  //importo la pag about\r\n// import City from '../components/City';    //importo city\r\n// import { Route } from 'react-router-dom'; //importo route\r\n\r\n// const apiKey = '4ae2636d8dfbdc3044bede63951a019b';  //doy api key\r\n\r\n// function App() {                              //la funcion app\r\n//   const [cities, setCities] = useState([]);   //empiezo el state sin nada, despÃ©s le pusheare\r\n//   function onClose(id) {                      //la funcion cerrar, recibe una id para cerrar\r\n//     setCities(oldCities => oldCities.filter(c => c.id !== id));   //set cities, es una funcion que recibe las old cities y la filtra, sacando la que tenga el id igual al pasado por parametro\r\n//   }\r\n//   function onSearch(ciudad) {                 //funcion buscar la ciudad recibida por parametro\r\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`) //en la api busco esa ciudad, con el apiKey\r\n//       .then(r => r.json())  //la vuelvo json\r\n//       .then((resource) => { //recibo la respuesta\r\n//         if(resource.main !== undefined){    //y si existe\r\n//           const ciudad = {                  //la ciudad va a tener, los siguentes parametros\r\n//             min: Math.round(resource.main.temp_min),\r\n//             max: Math.round(resource.main.temp_max),\r\n//             img: resource.weather[0].icon,\r\n//             id: resource.id,\r\n//             wind: resource.wind.speed,\r\n//             temp: resource.main.temp,\r\n//             name: resource.name,\r\n//             weather: resource.weather[0].main,\r\n//             clouds: resource.clouds.all,\r\n//             latitud: resource.coord.lat,\r\n//             longitud: resource.coord.lon\r\n//           };\r\n//           setCities(oldCities => [...oldCities, ciudad]);// vuelvo la set cities con el valor del oldcities concatenados con la ciudad buscada\r\n//         } else {\r\n//           alert(\"Ciudad no encontrada\"); //si no esta devolver...\r\n//         }\r\n//       });\r\n//   }\r\n//   function onFilter(ciudadId) {   //la funcion filtrar, recibe el id de la ciudad\r\n//     let ciudad = cities.filter(c => c.id === parseInt(ciudadId)); //la ciudad va a valer, las cities filtradas \r\n//     if(ciudad.length > 0) {\r\n//         return ciudad[0];\r\n//     } else {\r\n//         return null;\r\n//     }\r\n//   }\r\n//   return (\r\n    \r\n//     <div className=\"App\">\r\n//       {/* <Nav onSearch={onSearch}/> */}\r\n//       {/* <div> */}\r\n//         {/* <Cards\r\n//           cities={cities}\r\n//           onClose={onClose}\r\n//         /> */}\r\n//          <Route path='/' render={() => <Nav on Search={onSearch} />}/>\r\n//       <Route path='/about' component={About}/>\r\n//       <Route exact path='/' render={() =>  <Cards cities={cities} onClose={onClose} />}/>\r\n//       <Route exact path='/ciudad/:ciudadId' \r\n//              render={({match}) => (<City city={onFilter(match.params.ciudadId)}/>)}/>\r\n//      {/*  </div> */}\r\n//       <hr />\r\n//     </div>\r\n    \r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}