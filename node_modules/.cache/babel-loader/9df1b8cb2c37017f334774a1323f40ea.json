{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guada\\\\OneDrive\\\\Escritorio\\\\Extras\\\\weather-app-responsive\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from 'react';    //import los estados de react\n// import './App.css'; //importo el css\n// import Nav from '../components/Nav.jsx';  //import el nav\n// import Cards from '../components/Cards.jsx';  //importo cards\n// import About from '../components/About';  //importo la pag about\n// import City from '../components/City';    //importo city\n// import { Route } from 'react-router-dom'; //importo route\n// const apiKey = '4ae2636d8dfbdc3044bede63951a019b';  //doy api key\n// function App() {                              //la funcion app\n//   const [cities, setCities] = useState([]);   //empiezo el state sin nada, despÃ©s le pusheare\n//   function onClose(id) {                      //la funcion cerrar, recibe una id para cerrar\n//     setCities(oldCities => oldCities.filter(c => c.id !== id));   //set cities, es una funcion que recibe las old cities y la filtra, sacando la que tenga el id igual al pasado por parametro\n//   }\n//   function onSearch(ciudad) {                 //funcion buscar la ciudad recibida por parametro\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`) //en la api busco esa ciudad, con el apiKey\n//       .then(r => r.json())  //la vuelvo json\n//       .then((resource) => { //recibo la respuesta\n//         if(resource.main !== undefined){    //y si existe\n//           const ciudad = {                  //la ciudad va a tener, los siguentes parametros\n//             min: Math.round(resource.main.temp_min),\n//             max: Math.round(resource.main.temp_max),\n//             img: resource.weather[0].icon,\n//             id: resource.id,\n//             wind: resource.wind.speed,\n//             temp: resource.main.temp,\n//             name: resource.name,\n//             weather: resource.weather[0].main,\n//             clouds: resource.clouds.all,\n//             latitud: resource.coord.lat,\n//             longitud: resource.coord.lon\n//           };\n//           setCities(oldCities => [...oldCities, ciudad]);// vuelvo la set cities con el valor del oldcities concatenados con la ciudad buscada\n//         } else {\n//           alert(\"Ciudad no encontrada\"); //si no esta devolver...\n//         }\n//       });\n//   }\n//   function onFilter(ciudadId) {   //la funcion filtrar, recibe el id de la ciudad\n//     let ciudad = cities.filter(c => c.id === parseInt(ciudadId)); //la ciudad va a valer, las cities filtradas \n//     if(ciudad.length > 0) {\n//         return ciudad[0];\n//     } else {\n//         return null;\n//     }\n//   }\n//   return (\n//     <div className=\"App\">\n//       {/* <Nav onSearch={onSearch}/> */}\n//       {/* <div> */}\n//         {/* <Cards\n//           cities={cities}\n//           onClose={onClose}\n//         /> */}\n//          <Route path='/' render={() => <Nav on Search={onSearch} />}/>\n//       <Route path='/about' component={About}/>\n//       <Route exact path='/' render={() =>  <Cards cities={cities} onClose={onClose} />}/>\n//       <Route exact path='/ciudad/:ciudadId' \n//              render={({match}) => (<City city={onFilter(match.params.ciudadId)}/>)}/>\n//      {/*  </div> */}\n//       <hr />\n//     </div>\n//   );\n// }\n// export default App;\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx'; // importo los componentes About y City\n\nimport About from '../components/About';\nimport City from '../components/City'; // importo Route:\n\nimport { Route } from 'react-router-dom';\nimport video from '../img/video.mp4';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n  const [cities, setCities] = useState([]);\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      autoPlay: true,\n      loop: true,\n      muted: true,\n      style: {\n        position: a\n      },\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: video,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/about\",\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/ciudad/:ciudadId\",\n      render: ({\n        match\n      }) => /*#__PURE__*/_jsxDEV(City, {\n        city: onFilter(match.params.ciudadId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/guada/OneDrive/Escritorio/Extras/weather-app-responsive/src/containers/App.js"],"names":["React","useState","Nav","Cards","About","City","Route","video","App","apiKey","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","onFilter","ciudadId","parseInt","length","position","a","match","params"],"mappings":"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","sourcesContent":["// import React, { useState } from 'react';    //import los estados de react\r\n// import './App.css'; //importo el css\r\n// import Nav from '../components/Nav.jsx';  //import el nav\r\n// import Cards from '../components/Cards.jsx';  //importo cards\r\n// import About from '../components/About';  //importo la pag about\r\n// import City from '../components/City';    //importo city\r\n// import { Route } from 'react-router-dom'; //importo route\r\n\r\n// const apiKey = '4ae2636d8dfbdc3044bede63951a019b';  //doy api key\r\n\r\n// function App() {                              //la funcion app\r\n//   const [cities, setCities] = useState([]);   //empiezo el state sin nada, despÃ©s le pusheare\r\n//   function onClose(id) {                      //la funcion cerrar, recibe una id para cerrar\r\n//     setCities(oldCities => oldCities.filter(c => c.id !== id));   //set cities, es una funcion que recibe las old cities y la filtra, sacando la que tenga el id igual al pasado por parametro\r\n//   }\r\n//   function onSearch(ciudad) {                 //funcion buscar la ciudad recibida por parametro\r\n//     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`) //en la api busco esa ciudad, con el apiKey\r\n//       .then(r => r.json())  //la vuelvo json\r\n//       .then((resource) => { //recibo la respuesta\r\n//         if(resource.main !== undefined){    //y si existe\r\n//           const ciudad = {                  //la ciudad va a tener, los siguentes parametros\r\n//             min: Math.round(resource.main.temp_min),\r\n//             max: Math.round(resource.main.temp_max),\r\n//             img: resource.weather[0].icon,\r\n//             id: resource.id,\r\n//             wind: resource.wind.speed,\r\n//             temp: resource.main.temp,\r\n//             name: resource.name,\r\n//             weather: resource.weather[0].main,\r\n//             clouds: resource.clouds.all,\r\n//             latitud: resource.coord.lat,\r\n//             longitud: resource.coord.lon\r\n//           };\r\n//           setCities(oldCities => [...oldCities, ciudad]);// vuelvo la set cities con el valor del oldcities concatenados con la ciudad buscada\r\n//         } else {\r\n//           alert(\"Ciudad no encontrada\"); //si no esta devolver...\r\n//         }\r\n//       });\r\n//   }\r\n//   function onFilter(ciudadId) {   //la funcion filtrar, recibe el id de la ciudad\r\n//     let ciudad = cities.filter(c => c.id === parseInt(ciudadId)); //la ciudad va a valer, las cities filtradas \r\n//     if(ciudad.length > 0) {\r\n//         return ciudad[0];\r\n//     } else {\r\n//         return null;\r\n//     }\r\n//   }\r\n//   return (\r\n    \r\n//     <div className=\"App\">\r\n//       {/* <Nav onSearch={onSearch}/> */}\r\n//       {/* <div> */}\r\n//         {/* <Cards\r\n//           cities={cities}\r\n//           onClose={onClose}\r\n//         /> */}\r\n//          <Route path='/' render={() => <Nav on Search={onSearch} />}/>\r\n//       <Route path='/about' component={About}/>\r\n//       <Route exact path='/' render={() =>  <Cards cities={cities} onClose={onClose} />}/>\r\n//       <Route exact path='/ciudad/:ciudadId' \r\n//              render={({match}) => (<City city={onFilter(match.params.ciudadId)}/>)}/>\r\n//      {/*  </div> */}\r\n//       <hr />\r\n//     </div>\r\n    \r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport './App.css';\r\nimport Nav from '../components/Nav.jsx';\r\nimport Cards from '../components/Cards.jsx';\r\n// importo los componentes About y City\r\nimport About from '../components/About';\r\nimport City from '../components/City';\r\n// importo Route:\r\nimport { Route } from 'react-router-dom';\r\nimport video from'../img/video.mp4';\r\n\r\n\r\nfunction App() {\r\n  const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\r\n  const [cities, setCities] = useState([]);\r\n  function onClose(id) {\r\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\r\n  }\r\n  function onSearch(ciudad) {\r\n    //Llamado a la API del clima\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if(recurso.main !== undefined){\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n  }\r\n  function onFilter(ciudadId) {\r\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\r\n    if(ciudad.length > 0) {\r\n        return ciudad[0];\r\n    } else {\r\n        return null;\r\n    }\r\n  }\r\n  return (\r\n   \r\n    <div className=\"App\">\r\n      <video autoPlay loop muted\r\n      style={{\r\n        position:a\r\n      }}>\r\n        <source src={video} type=\"video/mp4\"/>\r\n      </video>\r\n      <Route path='/' render={() => <Nav onSearch={onSearch} />}/>\r\n      <Route path='/about' component={About}/>\r\n      <Route exact path='/' render={() =>  <Cards cities={cities} onClose={onClose} />}/>\r\n      <Route exact path='/ciudad/:ciudadId' \r\n             render={({match}) => (<City city={onFilter(match.params.ciudadId)}/>)}/>\r\n      <hr />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}